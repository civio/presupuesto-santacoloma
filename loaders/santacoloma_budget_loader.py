# -*- coding: UTF-8 -*-
from budget_app.models import *
from budget_app.loaders import SimpleBudgetLoader
#from decimal import *

expenses_mapping = {
    'default': {'ic_code': 2, 'fc_code': 3, 'full_ec_code': 4, 'description': 5, 'forecast_amount': 6, 'actual_amount': 9},
    '2018': {'ic_code': 2, 'fc_code': 3, 'full_ec_code': 4, 'description': 5, 'forecast_amount': 6, 'actual_amount': 8},
    '2019': {'ic_code': 2, 'fc_code': 3, 'full_ec_code': 4, 'description': 5, 'forecast_amount': 6, 'actual_amount': 8},
}

income_mapping = {
    'default': {'full_ec_code': 3, 'description': 4, 'forecast_amount': 5, 'actual_amount': 8},
    '2018': {'full_ec_code': 3, 'description': 4, 'forecast_amount': 5, 'actual_amount': 7},
    '2019': {'full_ec_code': 3, 'description': 4, 'forecast_amount': 5, 'actual_amount': 7},
}
programme_mapping = {
    # old budget application: new programme
    '1100232012279909': '23113',
    '1100920012260217': '15120',
    '1100920012260300': '49100',
    '1100920012269900': '49100',
    '1100920012270600': '49100',
    '1100920014490100': '24100',
    '1110912024890500': '91204',
    '1200924044890300': '92400',
    '1200943014660100': '92200',
    '1200943014660300': '92200',
    '1300433012269900': '43200',
    '2000152014490300': '15000',
    '2000152017490000': '15000',
    '2000241014490100': '24100',
    '2000241014490200': '23116',
    '2000320002279913': '32609',
    '2000324054110200': '32606',
    '2000341014110100': '34000',
    '2000931004900000': '92901',
    '2700920042269980': '92401',
    '2800920112260300': '92009',
    '2900152012020100': '23105',
    '2900231052020100': '33701',
    '2900333012020100': '92400',
    '2900334062020100': '33701',
    '2900920052269900': '92020',
    '2900920052270600': '92020',
    '2900920056210000': '92019',
    '2900920162120200': '92000',
    '2900920162120400': '92000',
    '2900920162240000': '92000',
    '2900924012020100': '92400',
    '3100132002269911': '13500',
    '3100133002279903': '13301',
    '4000231082279909': '32700',
    '5000230002269900': '23100',
    '5000920112260300': '23100',
    '5021233014640000': '23110',
    '5022233022269900': '23111',
    '5022233022279909': '23111',
    '5022233024800200': '23111',
    '5023233012269900': '23112',
    '5023233012279909': '23112',
    '5024231012279909': '23102',
    '5030313022219909': '31100',
    '5030313022269900': '31100',
    '5030313022270600': '31100',
    '5031313012210600': '31101',
    '5031313012269900': '31101',
    '5031313012270600': '31101',
    '5032493012270600': '49301',  #
    '5032493012270600': '49302',  # repeated with different values
    '5033313032269900': '31102',
    '5033313032279909': '31102',
    '5112232012279909': '23113',
    '5120232052200100': '23109',
    '5120232052260900': '23109',
    '5120232052269900': '23109',
    '5120232052270600': '23109',
    '5120232054890100': '23109',
    '5120232054890101': '23109',
    '5200338012269900': '33000',
    '5200338012279909': '33000',
    '5209231022269900': '23107',
    '5209231022279909': '23107',
    '5210338012269900': '33802',
    '5210338012279909': '33802',
    '5210338012279910': '33802',
    '5311232012279909': '23117',
    '5411335012269900': '33402',
    '5411335012279909': '33402',
    '5411335012279910': '33402',
    '5412335012269900': '33401',
    '5412335012279909': '33401',
    '5412335012279910': '33401',
    '5413333012269900': '33302',
    '5413333012279910': '33302',
    '5415332012269900': '33210',  #
    '5415332012269900': '33211',  #
    '5415332012269900': '33212',  #
    '5415332012269900': '33213',  #
    '5415332012269900': '33214',  #
    '5415332012279910': '33210',  #
    '5415332012279910': '33211',  #
    '5415332012279910': '33212',  #
    '5415332012279910': '33213',  #
    '5415332012279910': '33214',  # repeated with different values
    '5416337012279910': '33403',
    '5417232032269900': '33404',  #
    '5417232032269900': '33405',  #
    '5417232032279909': '33404',  #
    '5417232032279909': '33405',  #
    '5417232032279909': '33406',  #
    '5417232032279909': '33407',  # repeated with different values
    '5418232042269900': '32601',
    '5419172004890300': '31100',
    '5419232014890100': '23113',
    '5419232074800200': '23106',
    '5419233014890300': '23104',
    '5419313024890300': '31101',
    '5419324034890100': '32600',
    '5419334014890300': '33400',
    '5419924044890100': '92400',
    '5419924044890300': '92400',
    '5500231032230000': '23105',
    '5500231032269900': '23105',
    '5500231032269910': '24100',
    '5500231032279909': '23104',  #
    '5500231032279909': '23105',  # repeated with different values
    '5500231034800100': '23105',
    '5500231034890800': '23115',
    '5514232022269900': '23118',
    '5514232022270600': '23118',
    '5514232072279909': '23118',
    '6000924042269900': '92400',
    '6100324014890100': '32602',
    '6100324022269900': '32000',
    '6100324034890100': '32603',
    '6110324022269900': '32001',
    '6110324024890600': '32604',
    '6110324024890601': '32605',
    '6120324032269900': '32607',
    '6130321014790300': '32301',
    '6140320004890100': '32302',
    '6140920152120100': '33701',
    '6210924012260900': '92402',
    '6210924012269914': '92403',
    '6210924012270600': '92402',
    '6210924044890100': '92400',
    '6212232042279909': '33701',
    '6212334062269900': '33701',
    '6212334064890100': '33701',
    '6212924042269900': '33701',
    '7000152027800000': '15100',
    '7110313022269900': '31103',
    '7110313022270600': '31103',
    '7110313024650000': '31103',
    '7120313042270600': '17200',
    '7120313044890100': '17200',
    '7130179012270600': '17220',
    '7140172002270600': '17230',
    '7150172002270000': '16221',
    '7150172002270600': '16221',
    '7200155006190001': '15300',
    '7200431014890100': '43120',
    '7200433012269900': '43200',
    '7200433014890100': '43300',
    '7300151006000100': '15120',
    '7300152012269900': '15000',
    '7400155006100000': '15300',
    '7400155006110100': '15300',
    '7400155006190001': '15300',
    '7400169006220100': '15300',
    '7400169006220100': '15300',
    '7400459016010100': '15002',
    '7400459016010400': '15002',
    '7400459016011000': '15002',
    '7400459016110100': '15002',
    '7400459016110200': '15002',
    '7400459016230100': '15002',
    '7500151036220100': '15003',
    '7500155006100000': '15300',
    '7500155006190001': '15300',
    '7500161016190002': '15003',
    '7500169006220100': '15300',
    '7600169001100000': '15300',
    '7600169001100100': '15300',
    '7600169001200100': '15300',
    '7600169001200300': '15300',
    '7600169001200400': '15300',
    '7600169001200600': '15300',
    '7600169001210000': '15300',
    '7600169001210100': '15300',
    '7600169001300000': '15300',
    '7600169001300200': '15300',
    '7600169001430000': '15300',
    '7600169001600000': '15300',
    '7610163012270000': '16300',
    '7610163012279911': '16302',
    '7620162022270000': '16211',
    '7630320002270000': '32300',  #
    '7630320002270000': '33000',  #
    '7630320002270000': '34000',  #
    '7630920152270000': '43120',  #
    '7630920152270000': '92000',  # repeated with different values
    '7650163032270000': '16212',
    '7660431002120100': '43120',
    '7660431002269900': '43120',
    '7700151022100300': '15110',
    '7700151021200000': '15110',
    '7700151021200100': '15110',
    '7700151021200300': '15110',
    '7700151021200400': '15110',
    '7700151021200600': '15110',
    '7700151021210000': '15110',
    '7700151021210100': '15110',
    '7700151021210300': '15110',
    '7700151021300000': '15110',
    '7700151021300200': '15110',
    '7700151021500000': '15110',
    '7700151021600000': '15110',
    '7700151021610400': '15110',
    '7700151022270600': '15110',
    '7700151022270700': '15110',
    '7700151021310000': '15110',
    '7700151021430000': '15110',
    '7700151022279907': '15110',
    '7700155002269900': '15300',
    '7800155002100500': '15300',
    '7800155006110400': '15300',
    '7800169001200100': '15300',
    '7800169001200600': '15300',
    '7800169001210000': '15300',
    '7800169001210100': '15300',
    '7800169001600000': '15300',
    '7800169002100100': '15300',
    '7800169002100200': '15300',
    '7800169002100500': '15300',
    '7800169002101100': '15300',
    '7800169002140100': '15300',
    '7800169002219900': '15300',
    '7800169002270600': '15300',
    '7800169002279912': '15300',
    '7810155001200100': '15300',
    '7810155001200300': '15300',
    '7810155001200600': '15300',
    '7810155001210000': '15300',
    '7810155001210100': '15300',
    '7810155001300000': '15300',
    '7810155001300200': '15300',
    '7810155001500000': '15300',
    '7810155001600000': '15300',
    '7810155001620900': '15300',
    '7810155002100100': '15300',
    '7810155002100300': '15300',
    '7810155002100700': '15320',
    '7810155002101600': '15300',
    '7810155002101700': '15330',
    '7810155002210400': '15300',
    '7810155002260300': '15300',
    '7810155003520000': '15300',
    '7810155006110100': '15300',
    '7810155006190001': '15300',
    '7810155006240100': '15300',
    '7820459016011000': '15002',
    '7830155006110100': '15300',
    '7830155006190001': '15300',
    '7840169001200400': '15300',
    '7840169001200600': '15300',
    '7840169001210000': '15300',
    '7840169001210100': '15300',
    '7840169001300000': '15300',
    '7840169001300100': '15300',
    '7840169001300200': '15300',
    '7840169001310000': '15300',
    '7840169001430000': '15300',
    '7840169001600000': '15300',
    '7851171002270000': '16000',
    '7900320002120100': '32300',
    '7900920152120100': '92000',
    '7900920152130100': '92000',
    '7900920152270600': '92000',
    '7910165002210000': '16500',  #
    '7910165002210000': '16501',  #
    '7910165002210000': '16502',  #
    '7910320002210000': '32300',  #
    '7910320002210000': '33000',  #
    '7910320002210000': '34000',  # repeated with different values
    '7910320002210100': '32300',  #
    '7910320002210100': '33000',  #
    '7910320002210100': '34000',  # repeated with different values
    '7910320002210200': '32300',  #
    '7910320002210200': '33000',  #
    '7910320002210200': '34000',  # repeated with different values
    '7910920152210000': '43120',  #
    '7910920152210000': '92000',  # repeated with different values
    '7910920152210100': '43120',  #
    '7910920152210100': '92000',  # repeated with different values
    '7910920152210200': '43120',  #
    '7910920152210200': '92000',  # repeated with different values
    '7400459016090001': '15002',
    '7400459016090004': '15002',
    '7400459016090010': '15002',
    '7400459016190001': '15002',
    '7400459016190002': '15002',
    '7500459016190001': '15002',
    '7820459016090010': '15002',
    '2401169001300000': '15300',
    '2401169001300200': '15300',
    '2401169001600000': '15300',
    '7600169001610400': '15300',
    '7600169001620900': '15300',
    '7840169001620900': '15300',
    '7700151021620900': '15110',
    '7000152027800001': '15100',
}


class BudgetCsvMapper:
    default = 'default'

    def __init__(self, year, is_expense):
        column_mapping = income_mapping

        if is_expense:
            column_mapping = expenses_mapping

        mapping = column_mapping.get(str(year))

        if not mapping:
            mapping = column_mapping.get(self.default)

        self.ic_code = mapping.get('ic_code')
        self.fc_code = mapping.get('fc_code')
        self.full_ec_code = mapping.get('full_ec_code')
        self.description = mapping.get('description')
        self.forecast_amount = mapping.get('forecast_amount')
        self.actual_amount = mapping.get('actual_amount')


class SantacolomaBudgetLoader(SimpleBudgetLoader):

    # Make year data available in the class and call super
    def load(self, entity, year, path, status):
        self.year = year
        SimpleBudgetLoader.load(self, entity, year, path, status)

    # Parse an input line into fields
    def parse_item(self, filename, line):
        # Type of data
        is_expense = (filename.find('gastos.csv') != -1)
        is_actual = (filename.find('/ejecucion_') != -1)

        # Mapper
        mapper = BudgetCsvMapper(self.year, is_expense)

        # Expenses
        if is_expense:
            # Institutional code
            ic_code = line[mapper.ic_code]

            # Functional code
            fc_code = line[mapper.fc_code]

            # Economic code. We only need the first 5 digits in codes, so we ignore the rest
            full_ec_code = line[mapper.full_ec_code]
            full_ec_code = full_ec_code.ljust(7, '0')

            # Concepts are the first 3 digits from the economic codes
            ec_code = full_ec_code[:3]

            # Item numbers are the 4 and 5 digits from the economic codes
            item_number = full_ec_code[3:5]

            # For pre 2015 budgets we may need to amend the functional code
            if int(self.year) < 2015:
                ap_code = ic_code + fc_code + full_ec_code
                fc_code = programme_mapping.get(ap_code, fc_code)

            # Once the functional codes are amended we still need to fake subprogrammes
            fc_code = fc_code[:3] + '0' + fc_code[-2:]

            # And all expenses go to the root node
            ic_code = '000'

            # Description
            description = line[mapper.description]
            description = self._spanish_titlecase(description)

            # Parse amount
            amount = line[mapper.actual_amount if is_actual else mapper.forecast_amount]
            amount = self._parse_amount(amount)

        # Income
        else:
            # Institutional code. All income goes to the root node
            ic_code = '000'

            # Functional code. We don't have functional codes in income
            fc_code = None

            # Economic code
            full_ec_code = line[mapper.full_ec_code]

            # Concepts are the firts 3 digits from the economic codes
            ec_code = full_ec_code[:3]

            # Item numbers are the 4 and 5 digits from the economic codes
            item_number = full_ec_code[3:5]

            # Description
            description = line[mapper.description]
            description = self._spanish_titlecase(description)

            # Parse amount
            amount = line[mapper.actual_amount if is_actual else mapper.forecast_amount]
            amount = self._parse_amount(amount)

        return {
            'is_expense': is_expense,
            'is_actual': is_actual,
            'fc_code': fc_code,
            'ec_code': ec_code,
            'ic_code': ic_code,
            'item_number': item_number,
            'description': description,
            'amount': amount
        }
